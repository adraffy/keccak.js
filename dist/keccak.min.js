function keccak(e=256){return new Fixed(e,1)}function sha3(e=256){return new Fixed(e,6)}function shake(e){return new Extended(e,31)}function bytes_from_str(t){if("string"!=typeof t)throw TypeError("expected string");var r=(t=unescape(encodeURIComponent(t)))["length"];let s=new Uint8Array(r);for(let e=0;e<r;e++)s[e]=t.charCodeAt(e);return s}function bytes_from_hex(t){if("string"!=typeof t)throw TypeError("expected string");var e=t["length"];if(1&e)throw new TypeError("expected string of hex bytes");let r=0;t.startsWith("0x")&&(r+=2);var s=e-r>>1;let i=new Uint8Array(s);for(let e=0;e<s;e++){var n=parseInt(t.slice(r,r+=2),16);if(Number.isNaN(n))throw new TypeError("expected hex byte");i[e]=n}return i}function hex_from_bytes(e){return[...e].map(e=>e.toString(16).padStart(2,"0")).join("")}class KeccakHasher{constructor(e,t){var r=1600;if(31&e)throw new Error("capacity % 32 != 0");if(e<0||r<=e)throw new Error("capacity must be [0,1600)");this.sponge=Array(50).fill(0),this.block_count=r-e>>5,this.block_index=0,this.suffix=t,this.ragged_block=0,this.ragged_shift=0}update(e){if(!(e instanceof Uint8Array))if(e instanceof ArrayBuffer)e=new Uint8Array(e);else if(Array.isArray(e))e=Uint8Array.from(e);else{if("string"!=typeof e)throw new TypeError("expected bytes");e=bytes_from_str(e)}let t=0;var r=e.length;if(0<this.ragged_shift&&(t=this._add_ragged(e,0),t==r))return this;let{sponge:s,block_index:i,block_count:n}=this;for(;t+4<=r;t+=4)s[i++]^=e[t]|e[t+1]<<8|e[t+2]<<16|e[t+3]<<24,i==n&&(permute32(s),i=0);return this.block_index=i,t<r&&this._add_ragged(e,t),this}_add_ragged(e,t){let{ragged_shift:r,ragged_block:s}=this,i=0;for(;t<e.length&&r<32;i++,t++,r+=8)s|=e[t]<<r;return 32==r&&(this._add_block(s),r=0,s=0),this.ragged_block=s,this.ragged_shift=r,i}_add_block(e){let{sponge:t,block_index:r,block_count:s}=this;t[r++]^=e,r==s&&(permute32(t),r=0),this.block_index=r}finalize(){let{sponge:e,suffix:t,ragged_shift:r,block_index:s,block_count:i}=this;if(r){if(-1==r)return this;t=this.ragged_block|t<<r}return e[s]^=t,e[i-1]^=2147483648,permute32(e),this.ragged_shift=-1,this}}class Extended extends KeccakHasher{constructor(e,t){super(e<<1,t),this.size0=e>>2,this.byte_offset=0}hex(e){return hex_from_bytes(this.bytes(e))}bytes(e){this.finalize();var{sponge:t,byte_offset:r,block_count:s}=this,i=3&r,n=(0<i)+((e=e||this.size0)+3>>2);let o=new Int32Array(n),a=(r>>2)%s;for(let e=0;e<n;e++)o[e]=t[a++],a==s&&(permute32(t),a=0);return this.byte_offset=r+e,new Uint8Array(o.buffer,i,e)}}class Fixed extends KeccakHasher{constructor(e,t){super(e<<1,t),this.size=e>>5}get hex(){return hex_from_bytes(this.bytes)}get bytes(){this.finalize();var{size:t,sponge:r}=this;let s=new Int32Array(t);for(let e=0;e<t;e++)s[e]=r[e];return new Uint8Array(s.buffer)}}const RC=[1,0,32898,0,32906,-2147483648,-2147450880,-2147483648,32907,0,-2147483647,0,-2147450751,-2147483648,32777,-2147483648,138,0,136,0,-2147450871,0,-2147483638,0,-2147450741,0,139,-2147483648,32905,-2147483648,32771,-2147483648,32770,-2147483648,128,-2147483648,32778,0,-2147483638,-2147483648,-2147450751,-2147483648,32896,-2147483648,-2147483647,0,-2147450872,-2147483648];function permute32(t){for(let e=0;e<48;e+=2){var r=t[0]^t[10]^t[20]^t[30]^t[40],s=t[1]^t[11]^t[21]^t[31]^t[41],i=t[2]^t[12]^t[22]^t[32]^t[42],n=t[3]^t[13]^t[23]^t[33]^t[43],o=t[4]^t[14]^t[24]^t[34]^t[44],a=t[5]^t[15]^t[25]^t[35]^t[45],h=t[6]^t[16]^t[26]^t[36]^t[46],f=t[7]^t[17]^t[27]^t[37]^t[47],c=t[8]^t[18]^t[28]^t[38]^t[48],_=t[9]^t[19]^t[29]^t[39]^t[49],d=c^(i<<1|n>>>31),l=_^(n<<1|i>>>31);t[0]^=d,t[1]^=l,t[10]^=d,t[11]^=l,t[20]^=d,t[21]^=l,t[30]^=d,t[31]^=l,t[40]^=d,t[41]^=l,l=s^(a<<1|o>>>31),t[2]^=d=r^(o<<1|a>>>31),t[3]^=l,t[12]^=d,t[13]^=l,t[22]^=d,t[23]^=l,t[32]^=d,t[33]^=l,t[42]^=d,t[43]^=l,l=n^(f<<1|h>>>31),t[4]^=d=i^(h<<1|f>>>31),t[5]^=l,t[14]^=d,t[15]^=l,t[24]^=d,t[25]^=l,t[34]^=d,t[35]^=l,t[44]^=d,t[45]^=l,l=a^(_<<1|c>>>31),t[6]^=d=o^(c<<1|_>>>31),t[7]^=l,t[16]^=d,t[17]^=l,t[26]^=d,t[27]^=l,t[36]^=d,t[37]^=l,t[46]^=d,t[47]^=l,l=f^(s<<1|r>>>31),t[8]^=d=h^(r<<1|s>>>31),t[9]^=l,t[18]^=d,t[19]^=l,t[28]^=d,t[29]^=l,t[38]^=d,t[39]^=l,t[48]^=d,t[49]^=l;var u=t[0],g=t[1],y=t[11]<<4|t[10]>>>28,b=t[10]<<4|t[11]>>>28,p=t[20]<<3|t[21]>>>29,x=t[21]<<3|t[20]>>>29,k=t[31]<<9|t[30]>>>23,w=t[30]<<9|t[31]>>>23,m=t[40]<<18|t[41]>>>14,A=t[41]<<18|t[40]>>>14,v=t[2]<<1|t[3]>>>31,E=t[3]<<1|t[2]>>>31,U=t[13]<<12|t[12]>>>20,z=t[12]<<12|t[13]>>>20,C=t[22]<<10|t[23]>>>22,T=t[23]<<10|t[22]>>>22,I=t[33]<<13|t[32]>>>19,R=t[32]<<13|t[33]>>>19,F=t[42]<<2|t[43]>>>30,H=t[43]<<2|t[42]>>>30,K=t[5]<<30|t[4]>>>2,N=t[4]<<30|t[5]>>>2,S=t[14]<<6|t[15]>>>26,j=t[15]<<6|t[14]>>>26,B=t[25]<<11|t[24]>>>21,W=t[24]<<11|t[25]>>>21,q=t[34]<<15|t[35]>>>17,D=t[35]<<15|t[34]>>>17,G=t[45]<<29|t[44]>>>3,J=t[44]<<29|t[45]>>>3,L=t[6]<<28|t[7]>>>4,M=t[7]<<28|t[6]>>>4,O=t[17]<<23|t[16]>>>9,P=t[16]<<23|t[17]>>>9,Q=t[26]<<25|t[27]>>>7,V=t[27]<<25|t[26]>>>7,X=t[36]<<21|t[37]>>>11,Y=t[37]<<21|t[36]>>>11,n=t[47]<<24|t[46]>>>8,i=t[46]<<24|t[47]>>>8,a=t[8]<<27|t[9]>>>5,o=t[9]<<27|t[8]>>>5,c=t[18]<<20|t[19]>>>12,_=t[19]<<20|t[18]>>>12,f=t[29]<<7|t[28]>>>25,h=t[28]<<7|t[29]>>>25,r=t[38]<<8|t[39]>>>24,s=t[39]<<8|t[38]>>>24,d=t[48]<<14|t[49]>>>18,l=t[49]<<14|t[48]>>>18;t[0]=u^~U&B,t[1]=g^~z&W,t[10]=L^~c&p,t[11]=M^~_&x,t[20]=v^~S&Q,t[21]=E^~j&V,t[30]=a^~y&C,t[31]=o^~b&T,t[40]=K^~O&f,t[41]=N^~P&h,t[2]=U^~B&X,t[3]=z^~W&Y,t[12]=c^~p&I,t[13]=_^~x&R,t[22]=S^~Q&r,t[23]=j^~V&s,t[32]=y^~C&q,t[33]=b^~T&D,t[42]=O^~f&k,t[43]=P^~h&w,t[4]=B^~X&d,t[5]=W^~Y&l,t[14]=p^~I&G,t[15]=x^~R&J,t[24]=Q^~r&m,t[25]=V^~s&A,t[34]=C^~q&n,t[35]=T^~D&i,t[44]=f^~k&F,t[45]=h^~w&H,t[6]=X^~d&u,t[7]=Y^~l&g,t[16]=I^~G&L,t[17]=R^~J&M,t[26]=r^~m&v,t[27]=s^~A&E,t[36]=q^~n&a,t[37]=D^~i&o,t[46]=k^~F&K,t[47]=w^~H&N,t[8]=d^~u&U,t[9]=l^~g&z,t[18]=G^~L&c,t[19]=J^~M&_,t[28]=m^~v&S,t[29]=A^~E&j,t[38]=n^~a&y,t[39]=i^~o&b,t[48]=F^~K&O,t[49]=H^~N&P,t[0]^=RC[e],t[1]^=RC[e+1]}}export{keccak,sha3,shake,bytes_from_str,bytes_from_hex,hex_from_bytes};